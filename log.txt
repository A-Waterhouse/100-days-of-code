day1 
16/1/23

learnt what html, css and javascript are.
html tag opening and closing
element names
header tag
paragraph tag
properties of text fonts, clours and alignment

ended on vid 21
==================================================================================================
day2 
17/1/23

installed prettier plugin for vs code and how to use auto format shortcut (shift+alt+F)
chrome dev tools
edit index on the fly
using <P></P> for line breaks
making links to external resources
using anchor tag <a></a> and href= attributes
using nested elements anchor tag<a> inside paragraph tag<p>
using style element <style> with css rules/global rules
CSS selector "p" for type, all paragraph elements have properties between {}
p {
    font-family: sans-serif;
    text-align: center;
}
The selector (p in the above example) and the opening curly brace typically go into the same line
You then have one CSS property + its value per line
Every line MUST end with a semi-colon
The lines are indented (automatically, via the "Format Document" shortcut or because you pressed TAB)

The closing curly brace goes into a separate line, with no indentation
making code more readable, less elements
using meta info for the browser not visable to the user, seperating the 2 using <head> and <body>
adding <title>
setting <!DOCTYPE html>
using tab or enter for autocomplete
moving text around using alt+up or down once selected
added comments <!-- html comments--> for html and  /* css comments */ for css

ended on vid 32
=================================================================================================
day3
18/1/23

edited links using the a style, added underline whn hovering over link using text-decoration also changed colour of link using tyle atributes for <a>
styles can overide each other and inherit preious styles from <p>
added styles to seperate *.css file in same directory and linked it to the html file using link element and href <link rel="stylesheet" href="andys-styles.css" />
used rel (relation ) atribute
used the network tab in dev tools to see what files are being used (andys-styles.css)
used id on html elements <p id="todays-challenge"> addec css rule to andys-styles
changed font size using pixels px to make it absolute value for different resolutions
added fonts from google fonts to html file using links
used fallback fonts (font-family: "Anton", sans-serif) sans-serif will be applied if googlefonts is offline etc.
added image to html using img, chenged size using width and height in pixels, put it in circle using border
centered image by centering content in the body tag, img is void element therefore has no content, img is content of body so can be centered
targeted the higher level/parent to center image
removed text align from h1 and p since it is already used in parent, body

ended on vid 45
=================================================================================================
day 4
19/1/23

added 2nd html file to show rest of week tasks
set css styles for full_week.html
used ! to make skeleton template with meta data added
linked to full_week.html from the index.html file
shared css file across multiple html files
tidied up directory, made images and style sheets folders, linked to new paths in css an html
because matrix.png was in a css file to set background, the path had to be changed since computer aws looking in stylesheets/images instead of images, .. was used to state that ../images/matrix.png was in the root directory.
installed live dev server plugin

ended on vid 52
=================================================================================================
day 5
20/1/23

Made github account and uploaded files
created lists from paragraphs <p>, ordered lists <OL> an <UL> unordered lists
used list-style withing the lists
used inspect to see how the properties hierarchy works within nesting
used box model in css with margins borders and background colours within <h> or <a>
padding can be used top, right, bottom and left px to make square round text
border can be size and property of 
linemargin can have left and right properties
used padding to make page look better and centered list correctly using margins
structured html file correctly to make easier to read, header, h1,a,header. main,P
using the class selector, can be used for multiple elements
using decendent combinators (similar to #element targets) and setting rules to ancestors, parents and childs eg. body h1 {} can be used to set parameters of h1(s) within body, used to target specific paragraphs etc.
combinators (body p etc) should be used rather then #targets
added headings and paragraphs to the ordered lists to enable use of combinators

lost some data

ended on vid 62
=================================================================================================
day6
22/1/23

re-did lost data

.stlyes overrides combinators 
block elements and inline elemnts <p> block elements occupies entire width of page
inline elemnts <p><a></p> adds inline elment into block elements
block creates newline across width of page
inlne doesnt create new line or go full width
inline elements <a> <button> <img> <span>
pushed files to git from within vs code

ended on vid 65

=================================================================================================
day 7
23/1/23

used margins and padding to set out page, understanding collapsing margins
learnt which margins are ignored, only affect vertical margins, adjacent elements, biggest margin is used
added box shadow (x offset, y offset, blur radius,colour)
tried the test/challenge, did it a different way but worked out the same.

ended on vid 73
=================================================================================================
day 10 & 11
26&27/1/23

note for what tutor did different

made page from picture, day9.html
block elements use full width of browser, dont allow elements next to them, uses line break
inline allows elements next to each other, doesnt use line break
use width property to keep ratio of image
img should be within header element
should use h1 instead of a, and h2 instead of h1
h1 should not be nested in OL
ul was used instead of OL
set style within main instead of OL
margin left right auto wil center block elements
border left was used instead of box shadow in the ul to higlight some points
span was used to make word bold instead of b
keep tag and class selectors together and organised in the css file
tutor used a:hover, a:active to change link to style link so it looks like button and changes colour when hovered over
target property can be used to open link in new tab target=_blank


<em> or <strong> element can be used to highlight words which are read out of blind people <strong> makes it bold
<section> element is used to make code easier to read

ended on vid 87
=================================================================================================
day 12
29/1/23

hosted site @ https://andyswebsite.netlify.app/index.html
linked to githib
when github is updated, hosted site is updated
added favicon to the site

ended on vid 93
=================================================================================================
day 13
30/1/23

skipped github section as already set up

made new travel goals page
setup skelton and structure
learned about flex box and the default values used to move text about in the header etc.


ended on vid 121
=================================================================================================
day 14
31/1/23

learned more about flex boxrelative and absolute positioning
used positioning to move content by number of pixels
used position fixed to keep elements in same place, can be used for menus
added background image to site, made it centered and scaled correctly

ended on vid 129
=================================================================================================
day 15
1/2/23

finished off the header, moved it infront of image using position: absolute; atribute
structured highlights section using sections and containers
added images of destinations
styled the destinations using flex
used width 100% in reference to parent container
learnt how to resize images correctly
used object fit cover property to keep aspect ratio

ended on video 136
=================================================================================================
day 16
2/2/23

learnt how to control margins within parents (collapsing margins)
used gradient background colour (background: linear-gradient(45deg, rgb(227,255,253),rgb(202 , 243, 240));)
used flexbox an borders to style page
made new css and html for places page, used the same header, and footer
used position static atribute
learned about overiding rules within the html file depending on the position, above or below
used overflow property to change images so they fit in the borders of the container
worked on challege to style cards like tutors

ended on video 147
=================================================================================================
day 17
7/2/23

was able to complete challenge using margins, watched video to get answer so could use just flex
had to move <P> and <h2> into separate <div> so the actions <div> could be controlled seperately

spaced out cards using grid to control positioning more accurately for 2d layouts
made one of the list items cover entire width of the screen
used li:first-of-type{ to target 1st list item
li:nth-of-type(3){ to target numbered list item only
used grid-column: 1 / 3; to cover width
used 1/span 2 to same effect
used special characters to make page look more interesting using utf-8 
used symbol  &#x2192 to add arrow to "text"

finished on video 155
=================================================================================================
day 18
8/2/23

started to learn about responsive web design which changes depending on device used
did challenge to make page like on in video 160
made page look same using skills learnt in previous videos
will check against tutors solution to see what can be improved

finished on video 161
=================================================================================================
day 19
9/2/23

compared my attempt with tutors
he used grid instead of flex

leared about pixel scales and problems it can cause with user settings
pixels are unscalable
learned about % em and rem for font sizing
% relative to parent element size
em relative to font size
rem relative to elements root font size
enabling users to change font size in browser

when % is used for padding etc then it takes results from parent value, if no parent value it can take it from width
when em is used for paddding etc it takes results from parent value, if no parent value it can take it from font size
rem will do same but take result from root font size
em and rem always relate to font size
use rem for fonts and mix of rem and % px for other properties

changed values in tutors solution page to rem etc...
page fonts now respond correctly to resizing for different devices
left borders in px as they should not scale with page size

finished on video 170
=================================================================================================
day 20
12/2/23

used media queeries to change behavior based on width of device in px
using @media (max-width: 768px) {
to change site from 2 columns to 1 column under 768 px (mobile phones)
@ media works best at the bottom of the css file so it gets executed last 
added hamburger icon to mobile view using spaced flex columns 
open a side draw once icon clicked side draw covers entie page
close side draw when clicked again
using internal links to different parts of the site
target selector activating css rules when selected
used href id selector to jump to part of existing site
clicking burger icon jumps to part of site
used .html# to bring page back to being visable

finished on video 182
=================================================================================================
day 21
12/2/23

videos about tips to make site styled well
keep content centered
give centent space 
group elements with similar information together

give bigger font weights to titles and key information
bigger size fonts for titles and key info
try to use only 2 fonts, 1 serif and 1 sans serif

colours, use grey for background colour, pure black looks unatural for text also use grey tones
changes focus for titles and sub headers
use a primary colour for theme gives website identity
an accent colour can be used to highlight
presets can be used, css variables, must be placed in html {} in css
--color-grey-100: rgb(236, 236, 236);
background-color: var(--color-grey-100);
predefined scales can be changed all at once
can be used for font sizes etc... var(var--size-1)
varables only available for elements which are nested within that elements (html holds all elements)

use transformations and transitions, eg transform: scale (2);
transformations can be used in hover states
transitions should be used in default states, eg transition: transform 0.5s ease-out 1s;
can be used for colours, font sizes etc...

finished on video 194
=================================================================================================
day 22
16/2/23

intro to forms/input into websites
importnat html elements .... 

<input type=""> type is text, numbers, email etc..
<textarea> multiline text input fields
<select> used for dropdown options
<button> confirming inputs/submitting form/reseting form

input can be styled in the css file
<form> elemnt must be added to make functional
action atribute sends data to path set (website or database/server)
method atribute chooses type of http request sent to server(GET and POST)
GET tell browser to receive data, data is now part of url separated by &
POST tell browser to store data, data will be meta data

backend server needs to be set up to use either GET or POST

use <lable> to title form inputs
input must have id <input id/> to link label to using <label for="">
allows to click on title of input to focus on input

used font:inherit to override browser deault style in the button css, inherit from body

used input:focus to change properties of the input box
used cursor: pointer; whn over button to change cursor to hand 

finished on video 203
=================================================================================================

day 23
17/2/23

learned about different types of inputs, eg text (default), email, number, password, date, radio buttons, checkbox, file.
different inputs allow for different keyboards and other properties (special keyboards, vaildation)
<input type="number" step="5" name="user-age" id="userage"> step can be used to skip numbers using the arrows

help user and gives them better experience

used <hr> to add horizontal line to the form

radio buttons must have same name to group them together so only 1 can be picked
value is used to pre enter data in forms
value in radio buttons is used for machine readable value

learned about dropdowns, check boxes and how data is sent to servers using value

grouped forms inputs into sections and lists to tidy up the code

finished on video 211
=================================================================================================

day 24
19/2/23

learned about validation on forms and adding novalidate attribute to form to override
added atribute required to input to make sure something is typed in
added atribute required to password to enable minlength
attribute added to age min and max to make min age required
for date required min="1921-01-01" max="2003-01-01" must be in that format yyyy-mm-dd
date will now be restricted to those dates 

required can be used on radio buttons
enables warning in forms for missing data

placeholder atribute is used to add greyed out text into box, differs from value since value is like user typed it, can be used as hint 

risize handle on message box can be disabled in css so design stays how you want it 
textarea{
    resize: none;
}
can be used vertically or horizontaly

attempted challenge using leared skills, worked out OK but buttons were aligned differently

finished on video 218
=================================================================================================

day 25
22/2/23

learned about javascript, aded alerts and linked html file to external file using <script src="app.js"></script>
used arrays using the [] brackets, elements seperated by commas and in quotation
alert(hobbies[0]); displays 1st element of saved array
used properties within objects let job = { title: "developer", place: "new york", salary: 50000 }; to keep object variables related
like variables closed into that object
alert(job.title); shows the requested properties within the object using the . character
derived vaules from formulas and displayed output let adultYears = age - 18; alert(adultYears);
used functions to store formular
function calculateAdultYears (){
    adultYears =  age - 18
}
calculateAdultYears();
alert (adultYears);

age = 19;
 calculateAdultYears();
alert (adultYears);

finished on video 240
=================================================================================================
day 26
23/2/23

attempted excercise.js challenge 
part 1 - 5 were done correct and worked
part 5&6 were done differently but still worked, tutors had 2 less lines of code

learned to put functions into an object called methods
used console.log instead of alert

made mathoperations.js file
did some equations and displayed output in console
whole numbers are integers
numbers with decimals are floating point numbers or floats
used modulus operator % shows remainder from division eg 10/4 is 4*2 with 2 remaining
learned about linear equations using bodmas rules

javascript calculates right side of = first
result = result + 1; so result+1 can be calculated and stored as result
can be writtern as result++ instead
result-- can be used also to subtract 1
result += 5; result = result + 5
Exponentiation operator (i.e. replacement for age = 4 * 4 * 4)

+ can be used on stings also eg console.log("Andy" +" "+ "Waterhouse");

console.log(userName.length); used to calculate length of string, can also count objects in array


DOM section
learnd about window console.log(window) so we can view information about opened tab
DOM is Document Object model, the data representation of the parsed HTML code
javascript can interact with it, extract an manipulate data

used defer to delay loading of html until js is loaded

document.body.children[1].children[0].href = 'http://www.google.com'; was used to change url from within the js file




finished on video 260
=================================================================================================
day 27
26/2/23

learned about DOM tree and how it is similar to HTML
drilled into document to find the DOM code document.body.children[1].children[0].href to get the path for js
can use query elements to drill into the DOM may be an easier way to get the DOM address

can live type into the console in dev tools to help drill intot he DOM using previews
elements and text pieces are stored seperately in the DOM
TEXT NODES the white space is part of the DOM read as text/spaces, first child nodes may be the white spaces

document.body.firstElementChild accesses the h1 element
or document.body.children[1] for <p> or [0] for <h1> in the example
all depending on where elements are in the HTML code, if code changes the DOM address changes too

changes layout and added new <p> element and id for the link, to use query function
document.getElementById method
let anchorElement = document.getElementById("external-link");
anchorElement.href = "http://www.google.com";

querySelector method can be used also
anchorElement = document.querySelector("#external-link");
anchorElement.href = "http://www.bbc.com";

getElementById can only work if id given in the html code
querySelector works on any css selector eg html type <a> same as in css, will always select the 1st matching element
querySelectorAll will return all matching elements not just 1st

document.getElementById('some-id'): Select a HTML element by its ID (selects only one element, since IDs should be unique)
document.querySelector('<some-css-selector>'): Selects the first matching (!) HTML element that is met / selected by the provided CSS selector; The CSS selector can basically be any kind of valid CSS selector (e.g. ID selector, tag type selector, class selector, combined selectors etc.)
document.querySelectorAll('<some-css-selector>'): Selects ALL matching HTML elements that are met / selected by the provided CSS selector

There also are a few lesser used selection methods, that you also should've heard about:
document.getElementsByClassName('some-css-class'): Selects all HTML elements that have the provided CSS class
document.getElementsByTagName('tag'): Selects all HTML elements that are of the provided HTML tag type

completed excercise to select variables via DOM and change text in HTML code via js and DOM

finished on video 267
=================================================================================================
day 28
27/2/23

learnt how to add element from the .js script
********************************// add an Element
// 1. create the new Element
//document.createElement("a"); //element created and stored in memory
let newAnchorElement = document.createElement("a");

// 2. get access to the parent element that shoule hold the new element
let firstParagraph = document.querySelector("p");

// 3. insert new element into the parent element content
firstParagraph.append(newAnchorElement);

added content to the <a> element using 
newAnchorElement.href = "http://www.google.com";
newAnchorElement.textContent = "leads to google";

can be used to remove elements//remove elements

************************************// 1. select element to remove
let firstH1Element = document.querySelector("h1");

// 2. remove it

firstH1Element.remove();

******************************************//move elements
firstParagraph.parentElement.append(firstParagraph);

//select parent of the place where it should be inserted and use append or insetBefore()


*****************************************//innerHTML

console.log(firstParagraph.innerHTML); //mix of text and HTML code

firstParagraph.innerHTML = "Hi! this is <strong>important</strong>";

finished on vodeo 273

=================================================================================================
day 29
28/2/23

learned how to make element responsive to click 
let paragraphElement = document.querySelector("p");

function changeParagraphText() {
  paragraphElement.textContent = "clicked";
}
paragraphElement.addEventListener("click", changeParagraphText);

using a callback function which is passed as a parameter value to another function to be executed in the future

created a input text box and logged the inputted text
let inputElement = document.querySelector("input");
function retriveUserInput() {
  let enteredText = inputElement.value;
  console.log(enteredText);
}
inputElement.addEventListener("input", retriveUserInput);

finished on video 277

=================================================================================================
day 30 
7/3/23

tried to get demo site without hints, managed to get the number counting down correctly
had to watch solution video to get it correct
had to use get element by id to select element in the html let productNameInputElement = document.getElementById("product-name");
had to use maxlength attribute in the html <input type="text" id="product-name" name="product-name" maxlength="60">

need to watch from video 276 to understand events better
went back to beginning and made jsnotes.txt 


finished on video 278
=================================================================================================
day 31
8/3/23

re watched videos 253 - 275 and made jsnotes.txt to understand it better

=================================================================================================
day 32
14/3/23

video 278

variable and constants
variables can be changed 

let enteredvalue = hi
enteredvalue = bye

constants never change 
const enteredvalue = hi

good practice to use const

const can change property values within a function but the overall const can not

used spanElement.className = "warning" in console to overide class name

spanElement.classList.add() or .remove to add/remove class to existing class, still keeps original class name

started excercise-2

completed excercise 2 and got it working.

will check against solution
mine was OK

finished on video 284
=================================================================================================
day 33
15/3/23

learnd about if statements and boolean values (true or false)
true executes if stament, false dows not
booleans are derived from comparison operators and combined from logical operators

comparison ==,=== ,      >,<,>=,<=            !,!=,!==
          equality       greater than etc.    inverse operators

logical   &&              ||
          and             or


== compares values 
=== compares value type, stings and numbers not being the same
letters are assigned numbers to compare

and operators both have to be true or false to get result
or operators only 1 has to be right
 && is prioratised when calculating
 () are calculated 1st

 added 


 if (remainingCharacters <= 10){

  productNameInputElement.classList.add ("warning");
  remainingCharsElement.classList.add ("warning");

}
if (remainingCharacters > 10){

  productNameInputElement.classList.remove  ("warning");
  remainingCharsElement.classList.remove ("warning");
}

too make realistic demo/demo.js work as intended

will check solution
tutor used else statement instead of 2nd if statement, not been told about that
worked the same
made new class for zero characters
added else if and else statements to add and remove classes


  if (remainingCharacters === 0) {
    productNameInputElement.classList.add("error");
    remainingCharsElement.classList.add("error");
  } else if (remainingCharacters <= 10) {
    productNameInputElement.classList.add("warning");
    remainingCharsElement.classList.add("warning");
    productNameInputElement.classList.remove("error");
    remainingCharsElement.classList.remove("error");
  } else {
    productNameInputElement.classList.remove("warning");
    remainingCharsElement.classList.remove("warning");
  }

finished on video 291
=================================================================================================

day 34
23/3/23

learnd aboutstoring booleans in variables and how to name them 

let isLoggedIn = true;

if (!isLoggedIn) {
  console.log("user is NOT logged in");
}

truthy and falsy values are used, js tries to convert values into boolean, empty string or number 0 will be trated as false 
shorter than checking for length >=0

loops are used to execute code multiple times

for               loop n number of times code is executed  
for...of          loop through elements of an array
for...in          loop through all properties of an object
while             loop as long as certain condition is met

for...of and for...in are used frequently

example of for loop
for (let i=0;i<10;i++){
console.log(i)
}

i will be incremented by 1 after every loop iteration, keeps going aslong as i is less than 10

could be i+2

for (must be let i = value ; looping condition dfining how long it should run; how i should chang in every iteration)

example of 'for of' loop

const users = ["max", "anna", "joel"]

for (const user of users ){
console.log(user);

}

logged individual users in the array


example of 'for in ' loop

const loggedInUser={

    name:"max",
    age:32,
    isAdmin:true
};

for (const key in loggedInUser){

console.log(key);

}

example shows property name only and not the value

console.log(loggedInUser[key])
allows values to be accessed

example of while loop

let isFinished = false;
while (!isFinished) {
  isFinished = confirm("Do you want to quit?");
}

console.log("done");

confirm box pops up and cancel is false value, true is OK

loop keeps running until ok is pressed then done is logged




// first example; sum numbers/for loop

const calculateSumButtonElement = document.querySelector("#calculator button"); //selects 1st button within elementID "calculator"

function calculateSum(){ //executes when button is clicked due to addeventlistener
const userNumberInputElement = document.getElementById("user-number");  //only used in this function so just define in function
const enteredNumber = userNumberInputElement.value; // gets value which is entered and stored

let sumUpToNumber = 0; //starts at 0
for (let i = 0; i <=enteredNumber; i++){ //runs until entered number is smaller or equal to entered number, then adds 1 to it
    sumUpToNumber=sumUpToNumber + i; //gets 0 and adds 1 to it
}

const outputResultElement = document.getElementById("calculated-sum"); //accesses paragraph 
outputResultElement.textContent = sumUpToNumber; //changes text content to result derived
outputResultElement.style.display = "block"; //in the css the style of calculated-sum was hidden, this changes it to visable
}

calculateSumButtonElement.addEventListener("click", calculateSum); //checks for click event then points to function once clicked

finished on video 299

=================================================================================================
day 35
1/4/23

learned about for of loop
used document.querySelectorAll(); to select all matching elements
document.querySelectorAll("#highlight-links button a"); more than 1 element is selected so array is formed

//highlight links excerceise

const highlightLinksButtonElement = document.querySelector(
  "#highlight-links button" //selects the button since its ID is selected and then the button within it
);

function highlightLinks() {
  const anchorElements = document.querySelectorAll("#highlight-links a"); //selects all anchors and forms array
  for (const anchorElement of anchorElements) { //selects elements within the formed array
    anchorElement.classList.add("highlight"); //adds the class to the selections
  }
}

highlightLinksButtonElement.addEventListener("click", highlightLinks);


// display user data

used for in loop
used to display every property within an object

// display user data

const dummyUserData = {
  //dummy user data information
  firstName: "Andy",
  lastName: "Waterhouse",
  Age: "40",
};
const displayUserDataButtonElement =
  document.querySelector("#user-data button"); //selects button same as previous example

function displayUserData() {
  //get access to unorders list and add list object to every item
  const outputDataElement = document.getElementById("output-user-data"); //selects the unordered list by ID
 outputDataElement.innerHTML=""; //clears existing data
 
  for (const key in dummyUserData) {
    //holds names as values, dummyUserData is object which will be looped through
    const newUserDataListItemElement = document.createElement("li"); //used to create a list item from the unordered list
    const outputText = key.toUpperCase() + ": " + dummyUserData[key]; //property name is stored as string value in the key const,makes it upper case and seperates values in array with a colon

    newUserDataListItemElement.textContent = outputText; //creates a string made up of multiple blocks
    outputDataElement.append(newUserDataListItemElement); //adds newuserdatalistitemelement to output data
  }
}
displayUserDataButtonElement.addEventListener("click", displayUserData); //on click displayUserData function is executed



statistics example uses a while loop
 //stats rolldice example

const rollDiceButtonElemnt = document.querySelector("#statistics button"); //selects the button element

function rollDice() {
  //random number code
return Math.floor(Math.random() * 6) + 1;//returns float between 0 and 1 by deault, multiply by 6 to get float number between 0 and 6, math.floor is used to remove floats/round down to integer, 1 is added to make the number between 1 and 6, since 6 was excluded and 0 is of no use

}

function deriveNumberOfDiceRolls() {
  //used to display the output
  const targetNumberInputElement =
    document.getElementById("user-target-number"); //targets the ID
  const diceRollsListElement = document.getElementById("dice-rolls"); //targets unordered list for theputput
  const enteredNumber = targetNumberInputElement.value; //selects the users input number
  diceRollsListElement.innerHTML = ""; //clears any list items from previous rolls

  let hasRolledTargetNumer = false; //boolean variable with initial value of false, will be true once rolled
  let numberOfRolls = 0; //set initial value, initialised before while loop since the while loop will change it

  while (!hasRolledTargetNumer) {
    //loop will run while NOT rolledtargetnumber is true using ! to invert
    const rolledNumber = rollDice(); //returns number between 1 and 6, number will be created for every loop
    // if (rolledNumber == enteredNumber) {//checks the result == is used since it will always be a string

    //   hasRolledTargetNumer = true; //changes boolean value based on result of the if statement
    // } commented out since can be shorter
    numberOfRolls++; //add 1 to value for each loop and stores new value in the variable
    
    
    const newRollListItemElement = document.createElement("li"); //creates new list element to display the data
    const outputText = "roll " + numberOfRolls + ": " + rolledNumber;// makes the format of the data
    newRollListItemElement.textContent = outputText; //changes the text content to the above created string
    diceRollsListElement.append(newRollListItemElement);//add the data to the string
    hasRolledTargetNumer = rolledNumber == enteredNumber; //doesnt need the extra variable since the result will be true or false, dont need the if check the result can be stored itself
  }
  const outputTotalRollsElement = document.getElementById("output-total-rolls"); //selects the spans
  const outputTargetNumberElement = document.getElementById(
    "output-target-number"
  );

  outputTargetNumberElement.textContent = enteredNumber;
  outputTotalRollsElement.textContent = numberOfRolls;
}

rollDiceButtonElemnt.addEventListener("click", deriveNumberOfDiceRolls);



while loop keeps executing code until parameters not met any more

finished on video 304

=================================================================================================
day 36
2/4/23

created and styled the html and css files for the naughts and crosses game, got about half way through
finished on video 309

=================================================================================================
day 37
11/4/23

finished the styling css files and the html file
started on the javascript file
used multiple folders to add structure to the file system and keep it easy to work with
used funtions to show and hide boxes using click events, learnd that a click event can also be executed on the backdrop

finished on video 312
=================================================================================================
day 37
18/4/23

used document.querySelector("form"); since it was the only form in the HTML
used new event listener addEventListener("submit") to execute function on submit
default behavior of submitting data to the server has to be overiden since there is no server
used event.preventDefault() , prevents page from reloading when submitting data in form which would restart the game
used const formData = new FormData(event.target) to modify blueprint of the form used to extract values, works on named attributes
const enteredPlayername = formData.get("playername"); was used to get and store the formdata from attribute named playername
now enteredPlayername constant had data seved to it

inputs must be validated
.trim() used to get rid of spaces infront of input
if (!enteredPlayername ) if not enteredPlayername is used to return boolean to execute code if empty string/false
added new html element to show error message within the box 
<p id="config-errors"></p> 
then used getElementById to create a const
then used errorsOutputElement.textContent = "Please enter a valid name!" to display a message
return; is used to stop ecextion of code in the function once valid input has been verified

used event.target.firstElementChild.classList.add("error"); to add a new class when error is detected so style can be changed
added css code to use the new class

editedPlayer variable was made to tell differnce between player 1 and 2 forms
data-playerid="1" or "2" was used to label each player name
editedPlayer = +event.target.dataset.playerid; number 1 or 2 was stored in the editedplayer variable

added code to update info on the screen depending on what was entered in the form
used const updatedPlayerDataElement = document.getElementById("player-" + editedPlayer + "-data") to dynamically construct the sting from the editedPlayer variable
used updatedPlayerDataElement.children[1].textContent = enteredPlayername to select the 2nd child element and updated it with the user inputted data

want to store the players name in the code, array is used
const players = [
  {
    name: "",
    symbol: "X"
  },
  {
    name: "",
    symbol: "O"
  },
];

since arrays start at 0 and data sets start at 1, 1 must be minused off editedPlayer to match them up
players[editedPlayer - 1]
  players[editedPlayer - 1].name = enteredPlayername will store the name
  closePlayerConfig(); is executed manually to close the form
formElement.firstElementChild.lastElementChild.value = ""; is used to erase data in the form so the last entered name nolonger persists

finished on video 315
=================================================================================================
day 38
28/4/23

added logic to hide the board and only show it if the playernames have been entered

function startNewGame (){
    if (players[0].name === "" || players[1].name === ""){     //used || for or operator
        alert("Please set names for both players!");
        return;
    }
    gameAreaElement.style.display = "block";

}

used if functions to switch between players using the arrays
function switchPlayer() {
  if (activePlayer === 0) {
    activePlayer = 1;
  } else {
    activePlayer = 0;
  }
}

used activePlayerNameElement.textContent = players[activePlayer].name; to switch the names on the board to display whos turn it is


used 2d array to check for winner, an array with other arrays for values

const gameData = [
[0, 0, 0],
[0, 0, 0],
[0, 0, 0],
]

used data-col=1 data-row=1 to assign each list item in the array

 <li data-col="1" data-row="1"></li>
          <li data-col="2" data-row="1"></li>
          <li data-col="3" data-row="1"></li>

          <li data-col="1" data-row="2"></li>
          <li data-col="2" data-row="2"></li>
          <li data-col="3" data-row="2"></li>

          <li data-col="1" data-row="3"></li>
          <li data-col="2" data-row="3"></li>
          <li data-col="3" data-row="3"></li>

used to change values in the 2d array, array will be checked for adjacent 1 for player 1 or 2 for player 2 too see if there is a winner or not yet

 const selectedColumn = selectedField.dataset.col;
  const selectedRow = selectedField.dataset.row;
is used to access the rows and columns

finsihed on video 318
=================================================================================================
day 39
2/5/23

saw how using if statements to check for winner woulc not be the best solution since it woulc have to have an if for every combination
instead checked if 1st field  [0] [0] is owned by the 2nd field [0] [1] in the array and the 3rd field
all fields in the 1st row will be owned by the same player
also want to make sure field values are greater than zero since thats what they are at the beginning
used 
function checkForGameOver() {
  if (
    gameData[0][0] > 0 &&
    gameData[0][0] === gameData[0][1] &&
    gameData[0][1] === gameData[0][2]
  ) {
    return gameData[0][0];
  }
}
since gameData also stores the players number/name

used for loop to change the index of the array
for(let i = 0; i < 3; i++){

  function checkForGameOver() {
  for (let i = 0; i < 3; i++) {
    if (
      gameData[i][0] > 0 &&
      gameData[i][0] === gameData[i][1] &&
      gameData[i][1] === gameData[i][2]
    ) {
      return gameData[i][0];
    }
  }
}
now the array index changes on every loop 

function checkForGameOver() { //checking columns for equality
  for (let i = 0; i < 3; i++) {
    if (
      gameData[0][i] > 0 &&
      gameData[0][i] === gameData[1][i] &&
      gameData[0][i] === gameData[2][i]
    ) {
      return gameData[0][i];
    }
  }
}

first go through all the rows and keep the columns fixed
then go through all the columns but keep the rows fixed

then checkd diagonals
//diagonal top left to bottom right
if (
  gameData[0][0] > 0 &&
  gameData[0][0] === gameData[1][1] &&
  gameData[1][1] === gameData[2][2]
) {
  return gameData[0][0];
}

//diagonal bottom left to top right
if (
  gameData[2][0] > 0 &&
  gameData[2][0] === gameData[1][1] &&
  gameData[1][1] === gameData[0][2]
) {
  return gameData[2][0];
}

using all combinations of the array

when there is a draw at 9 rounds

let currentRound = 1; since we start in round 1

if (currentRound === 9){
    return -1;

    using -1 to signify a draw


currentRound++; is used to add 1 to the current round before switch player function


information now needs to be outputted

finsihed on video 319
=================================================================================================

day 40 
3/5/23

finished off the game logic and got the browser based game working

finsihed on video 321

=================================================================================================

day 41
12/5/23

started learing about 3rd party packages to speed up development using prebuilt files
used to see which kind of work you want to do on your own and which you should use 3rd party for
if common tasks or features are used then 3rd party packages might be useful to save time and reduce errors

CSS
bootstrap, material ui and tailwind css are popular packages used for CSS
packages are sometimes called frameworks

javascript 
packages solve smaller problems, one at a time

3rd party uses less code but has less control over behavior
custom code is more error prone and more work, but have full control

typically 3rd party and custom are mixed for your projects

https://getbootstrap.com/ has examples of elements available with code to add it to your css

made new html file and added 
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
      crossorigin="anonymous"
    />

to the file from the 5.0 version of bootstrap
copied a navbar into new page, dropdowns dont work and responsive attributes of the page

added js code to the file from the bootstrap archive
now the dropdown and mobile versions work correctly

added Carousel package and images to the html, need to tweak the code to resize the images
tweaked code by making own css file and changing the target classes

made the navbar stay ontop of pics and at top of page whilst scrolling with 
header {
    position: sticky;
    top: 0;
    z-index: 1;
   }

which worked when added to css

anotherway was too look at the documentation and use fixed top class, added to the class lists

both worked and had z-index value over 999


making a parallax image on a page
needs js to make the effect

got js link from simpleparallax.com
<script src="https://cdn.jsdelivr.net/npm/simple-parallax-js@5.5.1/dist/simpleParallax.min.js"></script>

edited the settings using info from the website

const imageElement = document.getElementById("main-image");
new simpleParallax(imageElement, {
    scale:1.6,
    delay:0.1,
});

finished on video 334
=================================================================================================

day 42
14/5/23

fronend and backend
frontend only on the local browser/client
backend on servers
backend can store user enterd data/uploaded files/recommendations depending on users interaction eg amazon homepage/adding items to cart

in backend a programming language is executed on the server and not in browser
any language can be used depending on if it is suited for the tasks
python, PHP, c# nodeJS (javascript) are popular choices
nodeJS is JS outside of the browser
nodeJS can read+write files, parse incoming requests and send responses

installed nodeJS
used teminal in vscode to execute my app.js file

created custom server using nodeJS with;
const http = require("http");

function handleRequest(request, response){
response.statusCode = 200;
response.end("<h1>Hello World!</h1>");
}

const server = http.createServer(handleRequest);

server.listen(3000); //port 3000 used for dev, 80 or 443 is used for real use case

server is running on port 3000 and can be viewed in the browser using 
localhost:3000

nodejs server is now hosting the page with hello world! on it

control + C stops server from running in the terminal


added :
function handleRequest(request, response) {
  if (request.url === "/currenttime") {
    response.statusCode = 200;
    response.end("<h1>" + new Date().toISOString() + "/<h1>");
  } else if (request.url === "/") {
    response.statusCode = 200;
    response.end("<h1>Hello World!</h1>");
  }
}

to see how functions can be run on the server and displayed the current time with the /currenttime address

fininshed on video 346

=================================================================================================

day 43
15/5/23

leared about 3rd party library for server side JS
express JS is used
npm (node package manager is used in terminal)
initialised package.json file and installed express

used express to make same function in the server what was made before, less text used and more structured


going to make form and store data on server
made form by changing hello world string to form html res.send('<form><label>Your Name</label><input type="text"></form>');
had to quit and restat server and use single quote marks
will use single quote marks from now on

had to add app.use(express.urlencoded({extended: false})); to make it so the server could understand what was being sent
now data is sent to the server from the form

text file wil be used to store the data
made /data/users.json file to store the data
used const fs = require('fs'); to use the file system package built into js
used const path = require('path') to make file paths compatible with all systems
used const filePath = path.join(__dirname, 'data', 'users.json'); to tell server where to store data
fs.writeFileSync(filePath); runs the command

used const fileData = fs.readFileSync(filePath); to read data already inthe users.json file
used const existingUsers = JSON.parse(fileData); to convert data into correct language for the server
used existingUsers.push(): to add item to end of array

user name need to be added backinto the json file but with the correct language so must be converted back to raw data
  fs.writeFileSync(filePath, JSON.stringify(existingUsers)); stringify is used to save it as text back into the file

username is now stored in the users.json file
2nd username was added and also stored in the file

old data was preserved and new data was added

finished on video 351
=================================================================================================
day 44
18/5/23

used
app.get('/users',
  function (req, res) {
    const filePath = path.join(__dirname, 'data', 'users.json');

    const fileData = fs.readFileSync(filePath);
    const existingUsers = JSON.parse(fileData);

    res.send(existingUsers);
  });

  to view the stored user data as an array on localhost:3000/users

  now want to get The array and see it as html file

  a for loop was added to do this by putting data in unordered list
  let responseData = "<ul>";

  for (const user of existingUsers) {
    responseData += "<li>" + user + "</li>";
  }
  responseData += "</ul>";
  res.send(responseData);

user input is now stored and then html reponses are created

installed nodemon to auto start and stop the server/app.js

setup script to run nodemon app.js
had to move app.js into main directory since i couldnt figure out how to change working dir 
adjusted app.js file accordingly and now still works
 will use ****************100 days of code/app.js************** from now on 

 tested and all still working

right clicked on new app.js file and ran terminal so correct directory was used

 ran npm install to install node modules and package.json file
 
 

 added 
 const express = require("express");
const app = express();

app.get("/", function (req, res) {
  res.send("<h1>Hello World</h1>");
});

app.listen(3000);
to downloaded app.js file to start server and displayed hello world
ran npm start to start nodemon script

renamed old app.js file as node was getting 2 instances running on port 3000

finished on video 359
=================================================================================================

day 45
18/5/23

learned about using public folder so the hrefs work again, using
const app = express();

app.use(express.static('public'));

css files and js files are now stored in the public folder where code will look to see it it can find that file which has been referanced in the html

linked form to the app.js file and made it so data could be posted to the file resaurants.json

had to manually make resaurants.json have [] array brackets in there for it to work correctly


installed EJS engine so the created data on the server can now be viewed on the html file
 used 
app.set('views', path.join(__dirname, 'views')); // views refers to views folder name
app.set('view engine', 'ejs'); //view engine is name of the package option
const fs = require('fs');

set will enable ooptions for the express app


renamed the .html files to .ejs so ejs now knows that those are templates

app.get('/', function (req, res) {
  res.render('index');
});

is now used to show the data, this is using the ejs engine

logic and dynamic conten can be generated on the server and change the html

added
<p>We found X restaurants.</p>
to the resaurants.ejs file, now i want x to be dynamic

<p>We found <%= numberOfRestaurants %> restaurants.</p>
is added to make that section dynamic

app.get('/restaurants', function (req, res) {
  res.render('restaurants', { numberOfRestaurants: 2 });
});
is added to the app.js file so it can communicate with the ejs file
 2 will be changed later 


 app.get('/restaurants', function (req, res) {
  const filePath = path.join(__dirname, 'data', 'restaurants.json');
  const fileData = fs.readFileSync(filePath);
  const storedRestaurants = JSON.parse(fileData);
  res.render('restaurants', { numberOfRestaurants: storedRestaurants.length });
});

added file info to the function and length is now used to count number of items in array

now number updates when new data is added to share restaurants

info from the array was added to the website using js code in the ejs file

a for loop was used to loop through the json data
<% for (const restaurant of restaurants) { %>


<h2><%= restaurant.name %></h2>
              <div class="restaurant-meta">
                <p><%= restaurant.cuisine %></p>
                <p><%= restaurant.address %></p>
              </div>
              <p>
                <%= restaurant.description %>
              </p>



was added to look for the data in the json file name, cuisine and address are titles in the json file


 res.render('restaurants', {
    numberOfRestaurants: storedRestaurants.length,
    restaurants: storedRestaurants,

stored resaurants was added to the js file so the data was rendered in the ejs

if/else stament was used to show message if there were 0 recommendations, else was the results in the json file

finished on video 365
=================================================================================================

day 46 
20/5/23

used include ejs function to split page up into parts for easier updating and make the html more managageable

made new folder called includes and put in a header.ejs file
cut and pasted header from reataurants.ejs file into the header.ejs file
in the restaurant.ejs file used a ejs shortcut to link to the header.ejs file
<%- %> is used to render information, treats html cade as code not raw text, otherwise raw text is used when = is used instead
<%- include('includes/header') %>
added <%- include('includes/draw') %>
to split the side draw info

<%- include('includes/head') %>
made one for the head too, but some pages had page specific data so those lines got left in the original file

made one for the restaurant form data
<%- include('includes/restaurant/restaurant-item', {restaurant: restaurant})%>
this must include the key from reataurant items and the constant in the curly brackets

ejs syntax isnt understood by vs code, ejs language extension was added
auto complete is now available

ejs template language was used and enabled the dynamic generated html content on the server
can also avoid code duplucation and split parts of the html with the include function

<%- renders the data as html content
<%= just displays raw text
<% if can also be used

finished html code arrives on the browser, not the ejs code


adding a detail page so we can share links with otherwise
going to change the link button to a shere button

dynamic routes will be used, since I wont know how many items will be added to the list and each one needs a unique ID which wont be know yet
so shouldnt make a line of code for each potential list item

a dynamic route with a dynamic placeholder which will be encoded into the url will be used
used 

app.get('/restaurants/:id');

:id is used to make dynamic route

req.params.id..... id must be used here since i used id in the :id part


this is used to show same page but with different data, eg the restaurant name


full code is

app.get('/restaurants/:id', function (req, res){

 const restaurantId = req.params.id;
 res.render('restaurant-detail', {rid: restaurantId});
});


<h1>TITLE OF THE RESTAURANT <%= rid %></h1> 
is added to the restaurant detail page where <%= rid %> is used to change the name dynamically

<a href="/restaurants/r1">View Restaurant</a>
is added to restaurant items.ejs as a dumm placeholder for the address

all css and script links must be changed to absolute paths by starting them with a "/"


must add unique IDs to the restaurants.json file using a 3rd party package
installed uuid package via terminal

add new const to the app.js
const uuid = require('uuid');
to enable use of the uuid package

restaurant.id = uuid.v4(); 
is added to the app.post('/recommend', function (req, res)
v4 part will give a unique id

changed <a href="/restaurants/r1">View Restaurant</a>
in the restaurant-item.ejs file

to  <a href="/restaurants/<%= restaurant.id %> ">View Restaurant</a>
so i can now access the new id section in the array

finished on video 371

=================================================================================================

