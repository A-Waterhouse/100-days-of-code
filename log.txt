day1 
16/1/23

learnt what html, css and javascript are.
html tag opening and closing
element names
header tag
paragraph tag
properties of text fonts, clours and alignment

ended on vid 21
==================================================================================================
day2 
17/1/23

installed prettier plugin for vs code and how to use auto format shortcut (shift+alt+F)
chrome dev tools
edit index on the fly
using <P></P> for line breaks
making links to external resources
using anchor tag <a></a> and href= attributes
using nested elements anchor tag<a> inside paragraph tag<p>
using style element <style> with css rules/global rules
CSS selector "p" for type, all paragraph elements have properties between {}
p {
    font-family: sans-serif;
    text-align: center;
}
The selector (p in the above example) and the opening curly brace typically go into the same line
You then have one CSS property + its value per line
Every line MUST end with a semi-colon
The lines are indented (automatically, via the "Format Document" shortcut or because you pressed TAB)

The closing curly brace goes into a separate line, with no indentation
making code more readable, less elements
using meta info for the browser not visable to the user, seperating the 2 using <head> and <body>
adding <title>
setting <!DOCTYPE html>
using tab or enter for autocomplete
moving text around using alt+up or down once selected
added comments <!-- html comments--> for html and  /* css comments */ for css

ended on vid 32
=================================================================================================
day3
18/1/23

edited links using the a style, added underline whn hovering over link using text-decoration also changed colour of link using tyle atributes for <a>
styles can overide each other and inherit preious styles from <p>
added styles to seperate *.css file in same directory and linked it to the html file using link element and href <link rel="stylesheet" href="andys-styles.css" />
used rel (relation ) atribute
used the network tab in dev tools to see what files are being used (andys-styles.css)
used id on html elements <p id="todays-challenge"> addec css rule to andys-styles
changed font size using pixels px to make it absolute value for different resolutions
added fonts from google fonts to html file using links
used fallback fonts (font-family: "Anton", sans-serif) sans-serif will be applied if googlefonts is offline etc.
added image to html using img, chenged size using width and height in pixels, put it in circle using border
centered image by centering content in the body tag, img is void element therefore has no content, img is content of body so can be centered
targeted the higher level/parent to center image
removed text align from h1 and p since it is already used in parent, body

ended on vid 45
=================================================================================================
day 4
19/1/23

added 2nd html file to show rest of week tasks
set css styles for full_week.html
used ! to make skeleton template with meta data added
linked to full_week.html from the index.html file
shared css file across multiple html files
tidied up directory, made images and style sheets folders, linked to new paths in css an html
because matrix.png was in a css file to set background, the path had to be changed since computer aws looking in stylesheets/images instead of images, .. was used to state that ../images/matrix.png was in the root directory.
installed live dev server plugin

ended on vid 52
=================================================================================================
day 5
20/1/23

Made github account and uploaded files
created lists from paragraphs <p>, ordered lists <OL> an <UL> unordered lists
used list-style withing the lists
used inspect to see how the properties hierarchy works within nesting
used box model in css with margins borders and background colours within <h> or <a>
padding can be used top, right, bottom and left px to make square round text
border can be size and property of 
linemargin can have left and right properties
used padding to make page look better and centered list correctly using margins
structured html file correctly to make easier to read, header, h1,a,header. main,P
using the class selector, can be used for multiple elements
using decendent combinators (similar to #element targets) and setting rules to ancestors, parents and childs eg. body h1 {} can be used to set parameters of h1(s) within body, used to target specific paragraphs etc.
combinators (body p etc) should be used rather then #targets
added headings and paragraphs to the ordered lists to enable use of combinators

lost some data

ended on vid 62
=================================================================================================
day6
22/1/23

re-did lost data

.stlyes overrides combinators 
block elements and inline elemnts <p> block elements occupies entire width of page
inline elemnts <p><a></p> adds inline elment into block elements
block creates newline across width of page
inlne doesnt create new line or go full width
inline elements <a> <button> <img> <span>
pushed files to git from within vs code

ended on vid 65

=================================================================================================
day 7
23/1/23

used margins and padding to set out page, understanding collapsing margins
learnt which margins are ignored, only affect vertical margins, adjacent elements, biggest margin is used
added box shadow (x offset, y offset, blur radius,colour)
tried the test/challenge, did it a different way but worked out the same.

ended on vid 73
=================================================================================================
day 10 & 11
26&27/1/23

note for what tutor did different

made page from picture, day9.html
block elements use full width of browser, dont allow elements next to them, uses line break
inline allows elements next to each other, doesnt use line break
use width property to keep ratio of image
img should be within header element
should use h1 instead of a, and h2 instead of h1
h1 should not be nested in OL
ul was used instead of OL
set style within main instead of OL
margin left right auto wil center block elements
border left was used instead of box shadow in the ul to higlight some points
span was used to make word bold instead of b
keep tag and class selectors together and organised in the css file
tutor used a:hover, a:active to change link to style link so it looks like button and changes colour when hovered over
target property can be used to open link in new tab target=_blank


<em> or <strong> element can be used to highlight words which are read out of blind people <strong> makes it bold
<section> element is used to make code easier to read

ended on vid 87
=================================================================================================
day 12
29/1/23

hosted site @ https://andyswebsite.netlify.app/index.html
linked to githib
when github is updated, hosted site is updated
added favicon to the site

ended on vid 93
=================================================================================================
day 13
30/1/23

skipped github section as already set up

made new travel goals page
setup skelton and structure
learned about flex box and the default values used to move text about in the header etc.


ended on vid 121
=================================================================================================
day 14
31/1/23

learned more about flex boxrelative and absolute positioning
used positioning to move content by number of pixels
used position fixed to keep elements in same place, can be used for menus
added background image to site, made it centered and scaled correctly

ended on vid 129
=================================================================================================
day 15
1/2/23

finished off the header, moved it infront of image using position: absolute; atribute
structured highlights section using sections and containers
added images of destinations
styled the destinations using flex
used width 100% in reference to parent container
learnt how to resize images correctly
used object fit cover property to keep aspect ratio

ended on video 136
=================================================================================================
day 16
2/2/23

learnt how to control margins within parents (collapsing margins)
used gradient background colour (background: linear-gradient(45deg, rgb(227,255,253),rgb(202 , 243, 240));)
used flexbox an borders to style page
made new css and html for places page, used the same header, and footer
used position static atribute
learned about overiding rules within the html file depending on the position, above or below
used overflow property to change images so they fit in the borders of the container
worked on challege to style cards like tutors

ended on video 147
=================================================================================================
day 17
7/2/23

was able to complete challenge using margins, watched video to get answer so could use just flex
had to move <P> and <h2> into separate <div> so the actions <div> could be controlled seperately

spaced out cards using grid to control positioning more accurately for 2d layouts
made one of the list items cover entire width of the screen
used li:first-of-type{ to target 1st list item
li:nth-of-type(3){ to target numbered list item only
used grid-column: 1 / 3; to cover width
used 1/span 2 to same effect
used special characters to make page look more interesting using utf-8 
used symbol  &#x2192 to add arrow to "text"

finished on video 155
=================================================================================================
day 18
8/2/23

started to learn about responsive web design which changes depending on device used
did challenge to make page like on in video 160
made page look same using skills learnt in previous videos
will check against tutors solution to see what can be improved

finished on video 161
=================================================================================================
day 19
9/2/23

compared my attempt with tutors
he used grid instead of flex

leared about pixel scales and problems it can cause with user settings
pixels are unscalable
learned about % em and rem for font sizing
% relative to parent element size
em relative to font size
rem relative to elements root font size
enabling users to change font size in browser

when % is used for padding etc then it takes results from parent value, if no parent value it can take it from width
when em is used for paddding etc it takes results from parent value, if no parent value it can take it from font size
rem will do same but take result from root font size
em and rem always relate to font size
use rem for fonts and mix of rem and % px for other properties

changed values in tutors solution page to rem etc...
page fonts now respond correctly to resizing for different devices
left borders in px as they should not scale with page size

finished on video 170
=================================================================================================
day 20
12/2/23

used media queeries to change behavior based on width of device in px
using @media (max-width: 768px) {
to change site from 2 columns to 1 column under 768 px (mobile phones)
@ media works best at the bottom of the css file so it gets executed last 
added hamburger icon to mobile view using spaced flex columns 
open a side draw once icon clicked side draw covers entie page
close side draw when clicked again
using internal links to different parts of the site
target selector activating css rules when selected
used href id selector to jump to part of existing site
clicking burger icon jumps to part of site
used .html# to bring page back to being visable

finished on video 182
=================================================================================================
day 21
12/2/23

videos about tips to make site styled well
keep content centered
give centent space 
group elements with similar information together

give bigger font weights to titles and key information
bigger size fonts for titles and key info
try to use only 2 fonts, 1 serif and 1 sans serif

colours, use grey for background colour, pure black looks unatural for text also use grey tones
changes focus for titles and sub headers
use a primary colour for theme gives website identity
an accent colour can be used to highlight
presets can be used, css variables, must be placed in html {} in css
--color-grey-100: rgb(236, 236, 236);
background-color: var(--color-grey-100);
predefined scales can be changed all at once
can be used for font sizes etc... var(var--size-1)
varables only available for elements which are nested within that elements (html holds all elements)

use transformations and transitions, eg transform: scale (2);
transformations can be used in hover states
transitions should be used in default states, eg transition: transform 0.5s ease-out 1s;
can be used for colours, font sizes etc...

finished on video 194
=================================================================================================
day 22
16/2/23

intro to forms/input into websites
importnat html elements .... 

<input type=""> type is text, numbers, email etc..
<textarea> multiline text input fields
<select> used for dropdown options
<button> confirming inputs/submitting form/reseting form

input can be styled in the css file
<form> elemnt must be added to make functional
action atribute sends data to path set (website or database/server)
method atribute chooses type of http request sent to server(GET and POST)
GET tell browser to receive data, data is now part of url separated by &
POST tell browser to store data, data will be meta data

backend server needs to be set up to use either GET or POST

use <lable> to title form inputs
input must have id <input id/> to link label to using <label for="">
allows to click on title of input to focus on input

used font:inherit to override browser deault style in the button css, inherit from body

used input:focus to change properties of the input box
used cursor: pointer; whn over button to change cursor to hand 

finished on video 203
=================================================================================================

day 23
17/2/23

learned about different types of inputs, eg text (default), email, number, password, date, radio buttons, checkbox, file.
different inputs allow for different keyboards and other properties (special keyboards, vaildation)
<input type="number" step="5" name="user-age" id="userage"> step can be used to skip numbers using the arrows

help user and gives them better experience

used <hr> to add horizontal line to the form

radio buttons must have same name to group them together so only 1 can be picked
value is used to pre enter data in forms
value in radio buttons is used for machine readable value

learned about dropdowns, check boxes and how data is sent to servers using value

grouped forms inputs into sections and lists to tidy up the code

finished on video 211
=================================================================================================

day 24
19/2/23

learned about validation on forms and adding novalidate attribute to form to override
added atribute required to input to make sure something is typed in
added atribute required to password to enable minlength
attribute added to age min and max to make min age required
for date required min="1921-01-01" max="2003-01-01" must be in that format yyyy-mm-dd
date will now be restricted to those dates 

required can be used on radio buttons
enables warning in forms for missing data

placeholder atribute is used to add greyed out text into box, differs from value since value is like user typed it, can be used as hint 

risize handle on message box can be disabled in css so design stays how you want it 
textarea{
    resize: none;
}
can be used vertically or horizontaly

attempted challenge using leared skills, worked out OK but buttons were aligned differently

finished on video 218
=================================================================================================






